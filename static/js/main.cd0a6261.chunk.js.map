{"version":3,"sources":["Box.js","App.js","serviceWorker.js","index.js"],"names":["Box","color","className","style","backgroundColor","App","props","state","boxArray","allColors","slice","map","index","key","setInterval","setState","prevState","randomBox","Math","floor","random","length","randomColor","getRandomColor","updatedBoxArray","red","green","blue","this","Component","defaultProps","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iSAKeA,G,MAFH,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAF,OAAa,yBAAKC,UAAU,MAAMC,MAAO,CAACC,gBAAiBH,OCCjEI,G,wDACL,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,CACTC,SAAW,EAAKF,MAAMG,UACrBC,MAAM,EAAG,IACTC,KAAI,SAACP,EAAiBQ,GACzB,OAAO,kBAAC,EAAD,CAAKC,IAAKD,EAAOX,MAAOG,QANf,E,gEAWE,IAAD,OACnBU,aAAY,WACX,EAAKC,UAAS,SAAAC,GACb,IAAIC,EAAYC,KAAKC,MAAMD,KAAKE,SAAW,EAAKb,MAAMC,SAASa,QAC3DC,EAAc,EAAKC,iBACfC,EAAkBR,EAAUR,SAASE,QAG7C,OADAc,EAAgBP,GAAa,kBAAC,EAAD,CAAKJ,IAAKI,EAAWhB,MAAOqB,IAClD,CACNd,SAAWgB,QAGX,O,uCAIH,IAAIC,EAAMP,KAAKC,MAAsB,IAAhBD,KAAKE,UACtBM,EAAQR,KAAKC,MAAsB,IAAhBD,KAAKE,UACxBO,EAAOT,KAAKC,MAAsB,IAAhBD,KAAKE,UAC3B,MAAM,OAAN,OAAcK,EAAd,aAAsBC,EAAtB,aAAgCC,EAAhC,O,+BAIA,OAAO,yBAAKzB,UAAU,OAAO0B,KAAKrB,MAAMC,c,GAnCxBqB,cAuClBxB,EAAIyB,aAAe,CAClBrB,UAAY,CACX,YACA,eACA,OACA,aACA,QACA,QACA,SACA,QACA,iBACA,OACA,aACA,QACA,YACA,YACA,aACA,YACA,QACA,iBACA,WACA,UACA,OACA,WACA,WACA,gBACA,WACA,WACA,YACA,YACA,cACA,iBACA,aACA,aACA,UACA,aACA,eACA,gBACA,gBACA,gBACA,gBACA,aACA,WACA,cACA,UACA,UACA,aACA,YACA,cACA,cACA,UACA,YACA,aACA,OACA,YACA,OACA,OACA,QACA,cACA,WACA,UACA,YACA,SACA,QACA,QACA,WACA,gBACA,YACA,eACA,YACA,aACA,YACA,uBACA,YACA,YACA,aACA,YACA,cACA,gBACA,eACA,iBACA,iBACA,iBACA,cACA,OACA,YACA,QACA,UACA,SACA,mBACA,aACA,eACA,eACA,iBACA,kBACA,oBACA,kBACA,kBACA,eACA,YACA,YACA,WACA,cACA,OACA,UACA,QACA,YACA,SACA,YACA,SACA,gBACA,YACA,gBACA,gBACA,aACA,YACA,OACA,OACA,OACA,aACA,SACA,MACA,YACA,YACA,cACA,SACA,aACA,WACA,WACA,SACA,SACA,UACA,YACA,YACA,YACA,OACA,cACA,YACA,MACA,OACA,UACA,SACA,YACA,SACA,QACA,QACA,aACA,SACA,gBAIaJ,QCvLK0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cd0a6261.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Box.css';\r\n\r\nconst Box = ({color}) => <div className=\"box\" style={{backgroundColor: color}} />;\r\n\r\nexport default Box;\r\n","import React, {Component} from 'react';\nimport Box from './Box';\nimport './App.css';\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n      boxArray : this.props.allColors\n      .slice(0, 32)\n      .map((backgroundColor, index) => {\n\t\t\t\treturn <Box key={index} color={backgroundColor} />;\n\t\t\t})\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tsetInterval(() => {\n\t\t\tthis.setState(prevState => {\n\t\t\t\tlet randomBox = Math.floor(Math.random() * this.state.boxArray.length);\n\t\t\t\tlet randomColor = this.getRandomColor();\n        let updatedBoxArray = prevState.boxArray.slice();\n        \n\t\t\t\tupdatedBoxArray[randomBox] = <Box key={randomBox} color={randomColor} />;\n\t\t\t\treturn {\n\t\t\t\t\tboxArray : updatedBoxArray\n\t\t\t\t};\n\t\t\t});\n\t\t}, 300);\n\t}\n\n\tgetRandomColor() {\n\t\tlet red = Math.floor(Math.random() * 256);\n\t\tlet green = Math.floor(Math.random() * 256);\n\t\tlet blue = Math.floor(Math.random() * 256);\n\t\treturn `rgb(${red}, ${green}, ${blue})`;\n\t}\n\n\trender() {\n\t\treturn <div className=\"app\">{this.state.boxArray}</div>;\n\t}\n}\n\nApp.defaultProps = {\n\tallColors : [\n\t\t'AliceBlue',\n\t\t'AntiqueWhite',\n\t\t'Aqua',\n\t\t'Aquamarine',\n\t\t'Azure',\n\t\t'Beige',\n\t\t'Bisque',\n\t\t'Black',\n\t\t'BlanchedAlmond',\n\t\t'Blue',\n\t\t'BlueViolet',\n\t\t'Brown',\n\t\t'BurlyWood',\n\t\t'CadetBlue',\n\t\t'Chartreuse',\n\t\t'Chocolate',\n\t\t'Coral',\n\t\t'CornflowerBlue',\n\t\t'Cornsilk',\n\t\t'Crimson',\n\t\t'Cyan',\n\t\t'DarkBlue',\n\t\t'DarkCyan',\n\t\t'DarkGoldenRod',\n\t\t'DarkGray',\n\t\t'DarkGrey',\n\t\t'DarkGreen',\n\t\t'DarkKhaki',\n\t\t'DarkMagenta',\n\t\t'DarkOliveGreen',\n\t\t'Darkorange',\n\t\t'DarkOrchid',\n\t\t'DarkRed',\n\t\t'DarkSalmon',\n\t\t'DarkSeaGreen',\n\t\t'DarkSlateBlue',\n\t\t'DarkSlateGray',\n\t\t'DarkSlateGrey',\n\t\t'DarkTurquoise',\n\t\t'DarkViolet',\n\t\t'DeepPink',\n\t\t'DeepSkyBlue',\n\t\t'DimGray',\n\t\t'DimGrey',\n\t\t'DodgerBlue',\n\t\t'FireBrick',\n\t\t'FloralWhite',\n\t\t'ForestGreen',\n\t\t'Fuchsia',\n\t\t'Gainsboro',\n\t\t'GhostWhite',\n\t\t'Gold',\n\t\t'GoldenRod',\n\t\t'Gray',\n\t\t'Grey',\n\t\t'Green',\n\t\t'GreenYellow',\n\t\t'HoneyDew',\n\t\t'HotPink',\n\t\t'IndianRed',\n\t\t'Indigo',\n\t\t'Ivory',\n\t\t'Khaki',\n\t\t'Lavender',\n\t\t'LavenderBlush',\n\t\t'LawnGreen',\n\t\t'LemonChiffon',\n\t\t'LightBlue',\n\t\t'LightCoral',\n\t\t'LightCyan',\n\t\t'LightGoldenRodYellow',\n\t\t'LightGray',\n\t\t'LightGrey',\n\t\t'LightGreen',\n\t\t'LightPink',\n\t\t'LightSalmon',\n\t\t'LightSeaGreen',\n\t\t'LightSkyBlue',\n\t\t'LightSlateGray',\n\t\t'LightSlateGrey',\n\t\t'LightSteelBlue',\n\t\t'LightYellow',\n\t\t'Lime',\n\t\t'LimeGreen',\n\t\t'Linen',\n\t\t'Magenta',\n\t\t'Maroon',\n\t\t'MediumAquaMarine',\n\t\t'MediumBlue',\n\t\t'MediumOrchid',\n\t\t'MediumPurple',\n\t\t'MediumSeaGreen',\n\t\t'MediumSlateBlue',\n\t\t'MediumSpringGreen',\n\t\t'MediumTurquoise',\n\t\t'MediumVioletRed',\n\t\t'MidnightBlue',\n\t\t'MintCream',\n\t\t'MistyRose',\n\t\t'Moccasin',\n\t\t'NavajoWhite',\n\t\t'Navy',\n\t\t'OldLace',\n\t\t'Olive',\n\t\t'OliveDrab',\n\t\t'Orange',\n\t\t'OrangeRed',\n\t\t'Orchid',\n\t\t'PaleGoldenRod',\n\t\t'PaleGreen',\n\t\t'PaleTurquoise',\n\t\t'PaleVioletRed',\n\t\t'PapayaWhip',\n\t\t'PeachPuff',\n\t\t'Peru',\n\t\t'Pink',\n\t\t'Plum',\n\t\t'PowderBlue',\n\t\t'Purple',\n\t\t'Red',\n\t\t'RosyBrown',\n\t\t'RoyalBlue',\n\t\t'SaddleBrown',\n\t\t'Salmon',\n\t\t'SandyBrown',\n\t\t'SeaGreen',\n\t\t'SeaShell',\n\t\t'Sienna',\n\t\t'Silver',\n\t\t'SkyBlue',\n\t\t'SlateBlue',\n\t\t'SlateGray',\n\t\t'SlateGrey',\n\t\t'Snow',\n\t\t'SpringGreen',\n\t\t'SteelBlue',\n\t\t'Tan',\n\t\t'Teal',\n\t\t'Thistle',\n\t\t'Tomato',\n\t\t'Turquoise',\n\t\t'Violet',\n\t\t'Wheat',\n\t\t'White',\n\t\t'WhiteSmoke',\n\t\t'Yellow',\n\t\t'YellowGreen'\n\t]\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}